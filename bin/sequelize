#!/usr/bin/env node

'use strict';

var spawn   = require('child_process').spawn;
var fs      = require('fs');
var path    = require('path');
var gulp    = path.resolve(__dirname, '..', 'node_modules', 'gulp', 'bin', 'gulp.js');
var args    = process.argv.slice(2);
var yargs   = require('yargs');
var _       = require('lodash');
var helpers = require(path.resolve(__dirname, '..', 'lib', 'helpers'));

if (!fs.existsSync(gulp)) {
  gulp = path.resolve(process.cwd(), 'node_modules', 'gulp', 'bin', 'gulp.js');
}

if (!fs.existsSync(gulp)) {
  throw new Error('Unable to find the `gulp` binary');
}

if ((args[0] === '-v') || (args[0] === '-V')) {
  args = ['version'];
}

// Let's load additional options from a file and add it to the gulp call
(function (optionsPath) {
  var rcFile = path.resolve(process.cwd(), '.sequelizerc');

  if (!optionsPath && fs.existsSync(rcFile)) {
    optionsPath = rcFile;
  }

  if (optionsPath) {
    var options = require(optionsPath);

    Object.keys(options).forEach(function (optionKey) {
      var value = options[optionKey];

      if (optionKey.indexOf('--') !== 0) {
        optionKey = '--' + optionKey;
      }

      args = args.concat([optionKey, value]);
    });
  }
})(yargs.argv.optionsPath);

args = args.concat([
  '--gulpfile', path.resolve(__dirname, '..', 'lib', 'gulpfile.js'),
  '--cwd', process.cwd()
]);

args.unshift(gulp);

// Add harmony support
[ '--harmony-scoping', '--harmony-modules', '--harmony-proxies',
  '--harmony-generators', '--harmony-numeric-literals', '--harmony-strings',
  '--harmony-arrays', '--harmony-arrow-functions', '--harmony'
].forEach(function (harmonyFlag) {
  if (_.includes(args, harmonyFlag)) {
    args = _.without(args, harmonyFlag);
    args.unshift(harmonyFlag);
  }
});

var call = spawn(process.argv[0], args);

helpers.view.teaser();

call.stdout.on('data', function (data) {
  var lines = data.toString().split('\n');

  lines = lines.filter(function (line) {
    return !line.match(/\[\d{2}:\d{2}:\d{2}\]/);
  });

  var result = lines
    .join('\n')
    .replace('gulp [task]', 'sequelize [task]');

  process.stdout.write(result);
});

call.stderr.on('data', function (data) {
  process.stderr.write(data);
});

call.on('exit', function (code) {
  process.exit(code);
});
