#!/usr/bin/env node

'use strict';

var spawn   = require('child_process').spawn
  , fs      = require('fs')
  , path    = require('path')
  , gulp    = path.resolve(__dirname, '..', 'node_modules', 'gulp', 'bin', 'gulp.js')
  , args    = process.argv.slice(2)
  , yargs   = require('yargs')
  , _       = require('lodash')
  , helpers = require(path.resolve(__dirname, '..', 'lib', 'helpers'))

if (!fs.existsSync(gulp)) {
 gulp = path.resolve(process.cwd(), 'node_modules', '.bin', 'gulp')
}

if (!fs.existsSync(gulp)) {
  throw new Error('Unable to find the `gulp` binary');
}

if ((args[0] === '-v') || (args[0] === '-V')) {
  args = ['version']
}

// Let's load additional options from a file and add it to the gulp call
(function(optionsPath) {
  var rcFile = path.resolve(process.cwd(), '.sequelizerc');
  if(!optionsPath && fs.existsSync(rcFile)) {
      optionsPath = rcFile;
  }
  else {
      rcFile = null;
  }

  if (optionsPath) {
    var options = rcFile ? JSON.parse(fs.readFileSync(rcFile, "utf8")) : require(optionsPath);

    Object.keys(options).forEach(function(optionKey) {
      var value = options[optionKey]

      if (optionKey.indexOf('--') !== 0) {
        optionKey = '--' + optionKey
      }

      args = args.concat([optionKey, value])
    })
  }
})(yargs.argv.optionsPath)

args = args.concat([
  '--gulpfile', path.resolve(__dirname, '..', 'gulpfile.js'),
  '--cwd', process.cwd()
])

args.unshift(gulp)

// Add harmony support
if (_.contains(args, '--harmony')) {
  args = _.without(args, '--harmony')
  args.unshift('--harmony')
}

var call = spawn(process.argv[0], args)

helpers.view.teaser()

call.stdout.on('data', function(data) {
  var lines  = data.toString().split("\n")
    , output = ""

  lines = lines.filter(function(line) {
    return (line.indexOf('[gulp]') === -1) || (line.indexOf('errored') > -1)
  })

  output = lines.join("\n")
  output = output.replace(/gulp/g, 'sequelize')

  process.stdout.write(output)
})

call.stderr.on('data', function (data) {
  process.stderr.write(data)
})

call.on('exit', function (code) {
  process.exit(code)
})
