#!/usr/bin/env node

'use strict';

// this produces a 2d array of combinations
function combinations (array) {
  if (!array.length) {
    return [];
  }

  // wrap non-array values
  // e.g. ['x',['y','z']] becomes [['x'],['y','z']]
  array = array.map(function (item) {
    return item instanceof Array ? item : [item];
  });

  // internal recursive function
  function combine (list) {
    var prefixes, combinations;

    if (list.length === 1) {
      return list[0];
    }

    prefixes = list[0];
    combinations = combine(list.slice(1)); // recurse

    // produce a flat list of each of the current
    // set of values prepended to each combination
    // of the remaining sets.
    return prefixes.reduce(function (memo, prefix) {
      return memo.concat(combinations.map(function (combination) {
        return [prefix].concat(combination);
      }));
    }, []);
  }

  return combine(array);
}

var coffeeVersions = ['0.3.5', '2.0.0'];
var dialects = ['mysql', 'sqlite'];
var sequelizeVersions = ['1.7.10', '2.0.0-rc8', '2.1.3', '3.3.2'];

console.log('env:');
combinations([coffeeVersions, dialects, sequelizeVersions]).forEach(function (combination) {
  console.log(
    '  - JS2COFFEE=' + combination[0] + ' DIALECT=' +
    combination[1] + ' SEQUELIZE=' + combination[2]
  );
});
